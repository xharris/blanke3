{
  "name": "keystate",
  "version": "0.0.1",
  "description": "Lightweight key state detection library",
  "main": "keys.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/code-curve/keys.git"
  },
  "keywords": [
    "key",
    "state",
    "keyboard"
  ],
  "author": {
    "name": "Dan Prince"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/code-curve/keys/issues"
  },
  "homepage": "https://github.com/code-curve/keys",
  "readme": "keystate\n========\n\nMaking Javascript key state handling easy. \n\n## Usage\n\n```js\nif(keys.left) {\n  console.log('left arrow key down');\n}\n\nif(keys.ctrl && keys.p) {\n  paste();\n}\n\nif(keys.shift && keys[0]) {\n  // do magic\n}\n```\n\nKeystate gives you access to a keys object whose properties reflect the states of the keys on your keyboard. Keystate uses `String.fromCharCode` (along with some predefined mappings) so that you can check the state of any alphanumeric key, along with the following list of modifiers. If you want to check numeric keys, access states like an array.\n\n```\nbackspace\ntab\nenter\nctrl\nalt\ncaps\nesc\nleft\nspace\nup\nright\ndown\ninsert\ndelete\n```\n\n## Installation\n\n`npm install keystate`\n\nor\n\n`bower install keystate`\n\nThen include `keystate.js` in your project and have a good time.\n",
  "readmeFilename": "README.md",
  "_id": "keystate@0.0.1",
  "dist": {
    "shasum": "90c3bf68edcd6890c144ae29b249a7a39b4b3256",
    "tarball": "https://registry.npmjs.org/keystate/-/keystate-0.0.1.tgz"
  },
  "_from": "keystate@latest",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "codecurve",
    "email": "dan@codecurve.net"
  },
  "maintainers": [
    {
      "name": "codecurve",
      "email": "dan@codecurve.net"
    }
  ],
  "_shasum": "90c3bf68edcd6890c144ae29b249a7a39b4b3256",
  "_resolved": "https://registry.npmjs.org/keystate/-/keystate-0.0.1.tgz"
}
